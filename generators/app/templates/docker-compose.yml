version: "2"

services:
  mariadb-<%= instance %>:
    image: wodby/mariadb:10.2-3.0.2
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: drupal
      MYSQL_USER: drupal
      MYSQL_PASSWORD: drupal
#    volumes:
#      - ./mariadb-init:/docker-entrypoint-initdb.d # Place init .sql file(s) here.
#      - /path/to/mariadb/data/on/host:/var/lib/mysql # I want to manage volumes manually.

  php-<%= instance %>:
    image: <%= phpImage %>
# 1. Images with vanilla Drupal – wodby/drupal:[DRUPAL_VERSION]-[PHP_VERSION]-[STABILITY_TAG].
#    image: wodby/drupal:8-7.0-3.3.2
#    image: wodby/drupal:7-7.1-3.3.2
#    image: wodby/drupal:7-7.0-3.3.2
#    image: wodby/drupal:7-5.6-3.3.2
#    image: wodby/drupal:6-5.6-3.3.2
#    image: wodby/drupal:6-5.3-3.3.2
# 2. Images without Drupal – wodby/drupal-php:[PHP_VERSION]-[STABILITY_TAG].
#    image: wodby/drupal-php:7.1-3.3.1
#    image: wodby/drupal-php:7.0-3.3.1
#    image: wodby/drupal-php:5.6-3.3.1
#    image: wodby/drupal-php:5.3-3.3.1
# 3. Images without Drupal – wodby/drupal-php:[PHP_VERSION]-[STABILITY_TAG]. Version for development (--enable-debug)
#    image: wodby/drupal-php:7.1-dev-3.3.1
#    image: wodby/drupal-php:7.0-dev-3.3.1
#    image: wodby/drupal-php:5.6-dev-3.3.1
#    image: wodby/drupal-php:5.3-dev-3.3.1
    environment:
      PHP_SENDMAIL_PATH: /usr/sbin/sendmail -t -i -S mailhog-<%= instance %>:1025
      PHP_FPM_CLEAR_ENV: "no"
      DB_HOST: mariadb-<%= instance %>
      DB_USER: drupal
      DB_PASSWORD: drupal
      DB_NAME: drupal
      DB_DRIVER: mysql
#      PHP_XDEBUG: 1
#      PHP_XDEBUG_DEFAULT_ENABLE: 1
#      PHP_XDEBUG_REMOTE_CONNECT_BACK: 0
#      PHP_XDEBUG_REMOTE_HOST: "10.254.254.254"
#      PHP_XDEBUG_PROFILER_OUTPUT_DIR: /mnt/files/xdebug/profiler
#      PHP_XDEBUG_TRACE_OUTPUT_DIR: /mnt/files/xdebug/traces
#      PHP_BLACKFIRE: 1
    volumes:
#      - codebase:/var/www/html
# Options for macOS users (http://docs.docker4drupal.org/en/latest/macos)
      - docker-sync-<%= instance %>:/var/www/html:nocopy # Docker-sync
#      - codebase:/var/www/html:cached # User-guided caching
## For Xdebug profiler files
#      - files:/mnt/files

  nginx-<%= instance %>:
# wodby/drupal-nginx:[DRUPAL_VERSION]-[NGINX_VERSION]-[STABILITY_TAG].
    image: <%= nginxImage %>
#    image: wodby/drupal-nginx:7-1.13-3.0.2
#    image: wodby/drupal-nginx:6-1.13-3.0.2
#    image: wodby/drupal-nginx:8-1.12-3.0.2
#    image: wodby/drupal-nginx:7-1.12-3.0.2
#    image: wodby/drupal-nginx:6-1.12-3.0.2
    depends_on:
      - php-<%= instance %>
    environment:
      NGINX_STATIC_CONTENT_OPEN_FILE_CACHE: "off"
      NGINX_ERROR_LOG_LEVEL: debug
      NGINX_BACKEND_HOST: php-<%= instance %>
      NGINX_SERVER_ROOT: /var/www/html/web
#      NGINX_DRUPAL_FILE_PROXY_URL: example.com
    volumes:
#      - codebase:/var/www/html
# Options for macOS users (http://docs.docker4drupal.org/en/latest/macos)
      - docker-sync-<%= instance %>:/var/www/html:nocopy # Docker-sync
#      - codebase:/var/www/html:cached # User-guided caching
    labels:
      - 'traefik.backend=nginx-<%= instance %>'
      - 'traefik.port=80'
      - 'traefik.frontend.rule=Host:<%= domain %>'

#  apache:
#    image: wodby/php-apache:2.4-2.0.0
#    depends_on:
#      - php-<%= instance %>
#    environment:
#      APACHE_LOG_LEVEL: debug
#      APACHE_BACKEND_HOST: php
#      APACHE_SERVER_ROOT: /var/www/html/web
#    volumes:
#      - codebase:/var/www/html
## Options for macOS users (https://docker4drupal.readthedocs.io/en/latest/macos)
##      - codebase:/var/www/html:cached # User-guided caching
##      - docker-sync:/var/www/html # Docker-sync
#    labels:
#      - 'traefik.backend=apache'
#      - 'traefik.port=80'
#      - 'traefik.frontend.rule=Host:<%= domain %>'

#  varnish:
#    image: wodby/drupal-varnish:4.1-2.2.0
#    depends_on:
#      - nginx-<%= instance %>
#    environment:
#      VARNISH_SECRET: secret
#      VARNISH_BACKEND_HOST: nginx-<%= instance %>
#      VARNISH_BACKEND_PORT: 80
#    labels:
#      - 'traefik.backend=varnish'
#      - 'traefik.port=6081'
#      - 'traefik.frontend.rule=Host:varnish.<%= domain %>'

<%= redis %>  redis-<%= instance %>:
<%= redis %>    image: wodby/redis:3.2-2.1.3
##    image: wodby/redis:4.0-2.1.3

#  adminer:
#    image: wodby/adminer:4.3-1.1.0
#    environment:
#      ADMINER_SALT: adminer-salt
#    labels:
#      - 'traefik.backend=adminer'
#      - 'traefik.port=9000'
#      - 'traefik.frontend.rule=Host:adminer.<%= domain %>'

  pma-<%= instance %>:
    image: phpmyadmin/phpmyadmin
    environment:
      PMA_HOST: mariadb-<%= instance %>
      PMA_USER: drupal
      PMA_PASSWORD: drupal
      PHP_UPLOAD_MAX_FILESIZE: 1G
      PHP_MAX_INPUT_VARS: 1G
    labels:
      - 'traefik.backend=pma'
      - 'traefik.port=80'
      - 'traefik.frontend.rule=Host:pma.<%= domain %>'

<%= solr %>  solr-<%= instance %>:
## wodby/drupal-solr:[DRUPAL_VERSION]-[SOLR_VERSION]-[STABILITY_TAG].
<%= solr %>    image: wodby/drupal-solr:8-6.6-2.3.0
##    image: wodby/drupal-solr:8-6.5-2.3.0
##    image: wodby/drupal-solr:8-6.4-2.3.0
##    image: wodby/drupal-solr:8-6.3-2.3.0
##    image: wodby/drupal-solr:8-5.5-2.3.0
##    image: wodby/drupal-solr:8-7.0-2.3.0
##    image: wodby/drupal-solr:8-7.1-2.3.0
##    image: wodby/drupal-solr:7-5.4-2.3.0
<%= solr %>    environment:
<%= solr %>      SOLR_HEAP: 1024m
<%= solr %>    labels:
<%= solr %>      - 'traefik.backend=solr'
<%= solr %>      - 'traefik.port=8983'
<%= solr %>      - 'traefik.frontend.rule=Host:solr.<%= domain %>'

  mailhog-<%= instance %>:
    image: mailhog/mailhog
    labels:
      - 'traefik.backend=mailhog-<%= instance %>'
      - 'traefik.port=8025'
      - 'traefik.frontend.rule=Host:mailhog.<%= domain %>'

#  nodejs-<%= instance %>:
#    image: wodby/drupal-node:1.0-1.0.0
#    environment:
#       NODE_SERVICE_KEY: node-service-key
#    labels:
#      - 'traefik.backend=nodejs'
#      - 'traefik.port=8080'
#      - 'traefik.frontend.rule=Host:nodejs.<%= domain %>'
#    volumes:
#      - ./path/to/your/single-page-app:/app
#    command: sh -c 'npm install && npm run start'

#  node-<%= instance %>:
#    image: node:alpine
#    working_dir: /app
#    labels:
#      - 'traefik.backend=node'
#      - 'traefik.port=3000'
#      - 'traefik.frontend.rule=Host:front.<%= domain %>'
#    expose:
#      - "3000"
#    volumes:
#      - ./path/to/your/single-page-app:/app
#    command: sh -c 'npm install && npm run start'

#  memcached-<%= instance %>:
#    image: wodby/memcached:1.4-2.0.0

#  rsyslog-<%= instance %>:
#    image: wodby/rsyslog

#  athenapdf-<%= instance %>:
#    image: arachnysdocker/athenapdf-service:2.10.0
#    environment:
#      WEAVER_AUTH_KEY: weaver-auth-key
#      WEAVER_ATHENA_CMD: "athenapdf -S"
#      WEAVER_MAX_WORKERS: 10
#      WEAVER_MAX_CONVERSION_QUEUE: 50
#      WEAVER_WORKER_TIMEOUT: 90
#      WEAVER_CONVERSION_FALLBACK: false

#  blackfire-<%= instance %>:
#    image: blackfire/blackfire
#    environment:
#      BLACKFIRE_SERVER_ID: XXXXX
#      BLACKFIRE_SERVER_TOKEN: YYYYY

#  webgrind-<%= instance %>:
#    image: wodby/webgrind:1.5-1.0.0
#    environment:
#      WEBGRIND_PROFILER_DIR: /mnt/files/xdebug/profiler
#    labels:
#      - 'traefik.backend=webgrind'
#      - 'traefik.port=8080'
#      - 'traefik.frontend.rule=Host:webgrind.<%= domain %>'
#    volumes:
#      - files:/mnt/files

# portainer-<%= instance %>:
#   image: portainer/portainer
#   command: --no-auth -H unix:///var/run/docker.sock
#   volumes:
#     - /var/run/docker.sock:/var/run/docker.sock
#   labels:
#     - 'traefik.backend=portainer'
#     - 'traefik.port=9000'
#     - 'traefik.frontend.rule=Host:portainer.<%= domain %>'

  traefik-<%= instance %>:
    image: traefik
    command: -c /dev/null --web --docker --logLevel=INFO --defaultEntryPoints='http' --defaultEntryPoints='https' --entryPoints="Name:https Address::443 TLS:/certs/cert.pem,/certs/key.pem" --entryPoints="Name:http Address::80"
    ports:
      - '<%= httpPort %>:80'
      - '<%= httpsPort %>:443'
#      - '8000:80'
#      - '8080:8080' # Dashboard
    volumes:
      - docker-sync-<%= instance %>-certs:/certs:nocopy
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
#  codebase:
## Docker-sync for macOS users
  docker-sync-<%= instance %>:
    external: true
  docker-sync-<%= instance %>-certs:
    external: true
